{"version":3,"sources":["index.js"],"names":["map","L","minZoom","maxZoom","center","zoom","crs","CRS","Simple","img_src","map_width","getImgSize","map_height","console","log","southWest","unproject","getMaxZoom","northEast","bounds","LatLngBounds","overlay","imageOverlay","addTo","setMaxBounds","popup","onMapClick","e","clientClick","project","latlng","overlayImage","_image","yR","clientHeight","naturalHeight","xR","clientWidth","naturalWidth","x","y","pointXY","pixel2MapLocation","numMarker","ExtraMarkers","icon","number","markerColor","marker","bindPopup","toString","openPopup","original_pixel_x_in_map","original_pixel_y_in_map","pixel_resolution","x_in_map","y_in_map","point","map2PixelLocation","x_in_pixel","y_in_pixel","src","img","Image","width","height","on"],"mappings":"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","file":"test.e31bb0bc.js","sourceRoot":"..","sourcesContent":["var map = L.map('mapid', {\n    minZoom: 1,\n    maxZoom: 4,\n    center: [0, 0],\n    zoom: 1,\n    crs: L.CRS.Simple\n});\n\nvar img_src = './map2.png'\n// var image = L.imageOverlay('./map2.png', bounds).addTo(mymap);\nvar map_width = getImgSize(img_src)[0]\nvar map_height = getImgSize(img_src)[1]\nconsole.log(map_width, map_height)\n\n// mymap.fitBounds(bounds)\n// calculate the edges of the image, in coordinate space\nvar southWest = map.unproject([0, map_height], map.getMaxZoom() - 1);\nvar northEast = map.unproject([map_width, 0], map.getMaxZoom() - 1);\nvar bounds = new L.LatLngBounds(southWest, northEast);\nconsole.log(\"image bounds: \", bounds)\n\n// add the image overlay, \n// so that it covers the entire map\nvar overlay = L.imageOverlay(img_src, bounds).addTo(map);\n\n// tell leaflet that the map is exactly as big as the image\nmap.setMaxBounds(bounds);\n\n\nvar popup = L.popup();\n\nfunction onMapClick(e) {\n\n    //Project the map click to x,y coordinates\n    var clientClick = map.project(e.latlng);\n    \n    //Grab the original overlay\n    var overlayImage = overlay._image;\n    \n    //Calculate the current image ratio from the original\n    var yR = overlayImage.clientHeight / overlayImage.naturalHeight;\n    var xR = overlayImage.clientWidth / overlayImage.naturalWidth;\n    console.log(\"overlay client height: \", overlayImage.clientHeight)\n    console.log(\"overlay natural height: \", overlayImage.naturalHeight)\n    \n    //scale the x,y coordinate of the click based on tile scaling of the overlay layer\n    var x = clientClick.x / xR;\n    var y = overlayImage.naturalHeight - clientClick.y / yR;\n    console.log(x,y);\n\n    var pointXY = pixel2MapLocation(x, y)\n\n    // popup\n    //     .setLatLng(e.latlng)\n    //     .setContent(\"pixle location: \" + e.latlng.toString() + \"\\n; map location: \" + pointXY.toString())\n    //     .openOn(map);\n\n \n    var numMarker = L.ExtraMarkers.icon({\n        icon: 'fa-number',\n        number: 12,\n        markerColor: 'blue'\n        });\n   \n    var marker = L.marker(e.latlng, {icon: numMarker}).addTo(map);\n    marker.bindPopup(pointXY.toString()).openPopup()\n}\n\nvar original_pixel_x_in_map = -51.224998 //unit is meter\nvar original_pixel_y_in_map = -51.224998 //unit is meter\nvar pixel_resolution = 0.05 //unit is meter\n\nfunction pixel2MapLocation (x, y) {\n\n    var x_in_map  = x * pixel_resolution + original_pixel_x_in_map \n    var y_in_map  = y * pixel_resolution + original_pixel_y_in_map\n    return L.point(x_in_map, y_in_map)\n}\n\nfunction map2PixelLocation(x, y) {\n    var x_in_pixel = (x - original_pixel_x_in_map) / pixel_resolution\n    var y_in_pixel = (y - original_pixel_y_in_map) / pixel_resolution\n\n    return L.point(x_in_pixel, y_in_pixel)\n}\n\nfunction getImgSize(src) {\n    var img = new Image()\n    img.src = src\n    return [img.width, img.height]\n}\nmap.on('click', onMapClick);"]}